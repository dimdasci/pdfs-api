AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  pdfa-api

  SAM Template for the PDF Structure Analysis API

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Architectures:
      - arm64
    Tags:
      Project: pdfa-api
      Owner: Dim
    Environment:
      Variables:
        PDF_BUCKET_NAME: "dimosaic-pdf-analyser-svhy308sv6"
        DYNAMODB_TABLE_NAME: "dimosaic-app-prod"
        POWERTOOLS_SERVICE_NAME: pdfa-api
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_LOG_LEVEL: DEBUG
        VERSION: !Ref ReleaseVersion
        COMMIT_HASH: !Ref ReleaseCommitHash
        APP_ENV: !Ref StageName

Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - local
    Description: Stage name for the application
  ReleaseVersion:
    Type: String
    Default: 1.0.0
    Description: Version number for the application
  ReleaseCommitHash:
    Type: String
    Description: Commit hash for the application
    Default: "unknown"
  CorsAllowedOrigin:
    Type: String
    Description: CORS Allow-Origin header value
    Default: https://dimosaic.dev

Resources:
  # Log Group for API Gateway Access Logs
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/pdfa-api-${StageName}-access
      RetentionInDays: 5

  PdfAnalysisHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >-
          { "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath", "status":"$context.status",
          "protocol":"$context.protocol", "responseLength":"$context.responseLength",
          "authorizer.principalId":"$context.authorizer.principalId",
          "authorizer.error":"$context.authorizer.error",
          "authorizer.status":"$context.authorizer.status",
          "integration.status":"$context.integration.status",
          "integration.error":"$context.integration.error" }
      CorsConfiguration:
        AllowOrigins:
          - !Ref CorsAllowedOrigin # Use Parameter
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowMethods:
          - GET
          - POST
          - OPTIONS
      Auth:
        Authorizers:
          JwtAuthorizer:
            FunctionArn: arn:aws:lambda:eu-central-1:992382613803:function:jwt-authorizer-prod
            AuthorizerPayloadFormatVersion: "2.0"
            Identity:
              Headers:
                - Authorization
            EnableSimpleResponses: true

  # Permission for API Gateway to invoke the external JWT Authorizer Lambda
  JwtAuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: arn:aws:lambda:eu-central-1:992382613803:function:jwt-authorizer-prod # ARN of the Authorizer Lambda
      Principal: apigateway.amazonaws.com
      # Scope permission to any authorizer within this specific API Gateway
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PdfAnalysisHttpApi}/authorizers/*

  HandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApiHandlerFunction}
      RetentionInDays: 5

  ApiHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Description: "PDF Analysis API Handler Function"
      FunctionName: !Sub pdfa-api-${StageName}
      ImageConfig:
        Command:
          - src.handlers.api_handler.lambda_handler
      Events:
        UploadApi:
          Type: HttpApi
          Properties:
            Path: /documents
            Method: post
            ApiId: !Ref PdfAnalysisHttpApi
            Auth:
              Authorizer: JwtAuthorizer
        ListApi:
          Type: HttpApi
          Properties:
            Path: /documents
            Method: get
            ApiId: !Ref PdfAnalysisHttpApi
            Auth:
              Authorizer: JwtAuthorizer
        GetManifestApi:
          Type: HttpApi
          Properties:
            Path: /documents/{docId}
            Method: get
            ApiId: !Ref PdfAnalysisHttpApi
            Auth:
              Authorizer: JwtAuthorizer
        GetPageBundleApi:
          Type: HttpApi
          Properties:
            Path: /documents/{docId}/pages/{page}
            Method: get
            ApiId: !Ref PdfAnalysisHttpApi
            Auth:
              Authorizer: JwtAuthorizer
        GetVersionApi:
          Type: HttpApi
          Properties:
            Path: /version
            Method: get
            ApiId: !Ref PdfAnalysisHttpApi
            # No Auth needed for this endpoint
      Policies:
        # Combined policies needed for all routes
        - S3WritePolicy:
            BucketName: "dimosaic-pdf-analyser-svhy308sv6"
        - S3ReadPolicy:
            BucketName: "dimosaic-pdf-analyser-svhy308sv6"
        - DynamoDBReadPolicy:
            TableName: "dimosaic-app-prod"
        # DynamoDBWritePolicy
        - DynamoDBWritePolicy:
            TableName: "dimosaic-app-prod"
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.13-v1

Outputs:
  PdfAnalysisApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${PdfAnalysisHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
